#!/bin/bash
#
# Help
showhelp () {
cat <<eof

  This script is used to calculate when it's "5pm".
  It calculates the time that the user can leave after working the defined workinghours.
  This is done by using the time that the user first logged in.
Options:
    --more | -m      : Show some more output.
    --quiet | -q     : Don't show any output, for running on startup
    --workhours | -w : Set the workhours, defaults to '08:30'
    --debug | -d     : Enable debug mode, aka echo some params
    --start | -s     : Don't use last to get the login time but the current time
    --version | -v   : Get the version
    --snappy | -sn   : Get a snappy comment back

  Configuration based on a daily fasion can be done in the /home/$whoami/.5pm/config file.
  Here one can add days where there are specific options. This is done in the following format:
    Wed=--workhours='07:50' -m
  This line sets the script to use 07:50 as workhours on Wednesday and also print more output that day.
  The matching is done based on 'date +%a'.

eof
  exit
}

# Methods
debug () {
  if $debug
  then
    echo "Debug: $@"
  fi
}

# Configparams
configparams () {
  # Params needed for config
  username=$( whoami )
  # Directories and files
  currentdir="/home/${username}/.5pm"
  configfile="${currentdir}/config"
  # Check if users .5pm directory exists
  if [ ! -d $currentdir ]; then
    debug Creating "$currentdir" directory
    mkdir $currentdir
  fi
}

# Params
params () {
  # Optional params
  if [ -z $debug ]; then debug=false ; fi
  if [ -z $workhours ]; then debug 'workhours not given'; workhours='08:30'; fi
  if [ -z $quiet ]; then quiet=false; fi
  if [ -z $more ]; then more=false; fi
  if [ -z $starts ]; then starts=false; fi
  if [ -z $version ]; then version=false; fi
  if [ -z $snappy ]; then snappy=false; fi
  # Needed for script
  installdir=$( dirname "${BASH_SOURCE[0]}" )
  # Time stamps
  dateYmd=$( date +%Y%m%d )
  currentH=$( date +%H )
  currentM=$( date +%M )
  workhoursH=$( echo $workhours | cut -d ':' -f1 )
  workhoursM=$( echo $workhours | cut -d ':' -f2 )
  regexHHMM='^[0-2]{0,1}[0-9]{1}\:[0-9]{2}$'
  # Tempfile
  tempfile="${currentdir}/.${dateYmd}.tmp"
  # Param checking
  if [ ! -z $workhours ]; then
    if [[ ! $workhours =~ $regexHHMM ]]; then
      echo 'Error: Workhours did not match the expected format, please use "hh:mm"'
      echo "Error: Regex that is used to match agains: $regexHHMM"
      exit 1
    fi
  fi
}

# Read the config from a config file
config () {
  if [ -f "$configfile" ]; then
    #   %a   locale's abbreviated weekday name (e.g., Sun)
    currentD=$( date +%a )
    for config in $( cat $configfile | sed 's/ /_/g' )
    do
      configwunder=$( echo $config | sed 's/_/ /g' )
      regexConfig='(Mon|Tue|Wed|Thu|Fri)\=((\s{0,1}(--workhours|-w)\=\"[0-2]{0,1}[0-9]{1}\:[0-9]{2}\")|\s(-m)){0,5}'
      if [[ ! $configwunder =~ $regexConfig ]]
      then
        echo "Error: Configuration syntax issue on line: \` $configwunder \`"
        #exit 1
      fi
      day=$( echo $config | cut -d '=' -f 1 )
      if [[ "${day}" == "$currentD" ]]
      then
        configOpts=$( echo $config | sed "s/$day=//g" | sed 's/_/ /g' )
        for optionfull in $configOpts
        do
          optionkey=$( echo $optionfull | cut -d '=' -f 1 )
          if [ "${optionkey}" == "--workhours" ]; then
            optionvalue=$( echo $optionfull | cut -d '=' -f 2 )
            workhours=$( echo $optionvalue | sed 's/"//g' )
          fi
        done
      fi
    done
  else
    debug No config file found, using defaults
  fi
}

# Format the Seconds to HH:MM
# Requiers one arugment: xxxxxxxS
parse_nice () {
  S=$1
  H=$(( $S / 3600 ))
  M=$( echo "( $S - $H * 3600 ) / 60" | bc )
  if (( $( echo "$H" | wc -m ) < 3 ))
  then
    H=$( echo "0${H}" )
  fi
  if (( $( echo "$M" | wc -m ) < 3 ))
  then
    M=$( echo "0${M}" )
  fi
  echo "${H}:${M}"
}

# Get the uptime
# Check if the machine was rebooted
get_logintime () {
  if [ -f "$tempfile" ]
  then
    logintime=$( cat $tempfile )
    debug Got uptime from tempfile
  else
    if $starts
    then
      logintime="$currentH:$currentM"
    else
      logintime=$( last | awk '{ print $7 }' | head -n 1 )
    fi
    echo "$logintime" > ${tempfile}
    debug Wrote logintime to tempfile
    # Clean up old tempfiles
    find $currentdir -name *.tmp -ctime +2 -delete
  fi
  debug logintime: $logintime
  logintimeH=$( echo $logintime | cut -d ':' -f1 )
  logintimeM=$( echo $logintime | cut -d ':' -f2 )
  logintimeS=$(( $( echo $logintimeH | sed 's/^0//g' )*60*60 + $logintimeM*60 ))
}

# Calculate the time to leave
get_leave () {
  leaveH=$( echo "$logintimeH + $workhoursH + ( $logintimeM + $workhoursM ) / 60" | bc )
  leaveM=$( echo "( $logintimeM + $workhoursM ) % 60" | bc )
  leaveS=$( echo "$leaveH * 3600 + $leaveM * 60" | bc )
  leave=$( parse_nice $leaveS )
  debug Leavingtime: $leave
}

# Calculate time remaining
get_remaining () {
  currentS=$( echo "$currentH * 3600 + $currentM * 60" | bc )
  remainingS=$( echo "$leaveS - $currentS" | bc )
  remaining=$( parse_nice $remainingS)
  debug Remaining: $remaining
}

# Calculate the time worked
get_worked () {
  workedS=$(( $currentS - $logintimeS ))
  workedhours=$( parse_nice $workedS )
  debug Worked: $workedhours
}

# Get version by getting the amount of git commits
get_version () {
  cd $installdir
  version=$( git log | grep commit | wc -l )
  echo "Version: 1.0.$version"
  cd - 2>&- 1>&-
  exit
}

# Print the output
nice_print () {
  echo "It's 5pm at $leave"
  echo "Time remaining is $remaining"
  if $more
  then
    echo "First logged in at $logintime"
    echo "Workhours set to $workhours"
    echo "Hours worked are $workedhours"
  fi
  if $snappy
  then
    snappy $leaveS
  fi
}

# Make some snappy remark based upon $remaining
snappy () {
  # 8 hours remaining
  if (( $remainingS <= 28800 )) && (( $remainingS > 25200 ))
  then
    echo "You just started!"
  # 7 hours remaining
  elif (( $remainingS <= 25200 )) && (( $remainingS > 21600 ))
  then
    echo "Seriously, you just started!"
  # 6 hours remaining
  elif (( $remainingS <= 21600 )) && (( $remainingS > 18000 ))
  then
    echo "Already tired?"
  # 5 hours remaining
  elif (( $remainingS <= 18000 )) && (( $remainingS > 14400 ))
  then
    echo "Trolrolrolrolr..."
  # 4 hours remaining
  elif (( $remainingS <= 14400 )) && (( $remainingS > 10800 ))
  then
    echo "luckily your you isn't very mentally challanging."
  # 3 hours remaining
  elif (( $remainingS <= 10800 )) && (( $remainingS > 7200 ))
  then
    echo "Don't you need to be working?"
  # 2 hours remaining
  elif (( $remainingS <= 7200 )) && (( $remainingS > 3600 ))
  then
    echo "Keep working, working, working..."
  # 1 hour remaining
  elif (( $remainingS <= 3600 )) && (( $remainingS > 1200 ))
  then
    echo "Hang in there, you can leave in about 1 hour."
  # 20 min remaining
  elif (( $remainingS <= 1200 )) && (( $remainingS > 600 ))
  then
    echo "You might want to check the traffic report..."
  elif (( $remainingS <= 600 )) && (( $remaining > 300 ))
  then
    echo "No one would notice if you left now."
  elif (( $remainingS <= 300 )) && (( $remaining > 0 ))
  then
    echo "You still working?"
  elif (( $remainingS < 0 ))
  then
    echo "Do you need to compensate for something?"
  fi
}

configparams
config

while test -n "$1"
do
  case "$1" in
    --help|-h)
      showhelp
      ;;
    --start|-s)
      starts=true
      shift
      ;;
    --debug|-d)
      debug=true
      shift
      ;;
    --more|-m)
      more=true
      shift
      ;;
    --quiet|-q)
      quiet=true
      shift
      ;;
    --workhours|-w)
      shift
      workhours=$1
      shift
      ;;
    --snappy|-sn)
      snappy=true
      shift
      ;;
    --version|-v)
      version=true
      shift
      ;;
    *)
      showhelp
      ;;
  esac
done

params
if $version; then
  get_version
fi
get_logintime
get_leave
get_remaining
get_worked
if ! $quiet; then
  nice_print
fi
